// UploadFile.js
import React, { useState } from "react";

// helpers
const isHex64 = (s) => /^[0-9a-f]{64}$/i.test(String(s || ""));
const hexToBytes = (hex) =>
  new Uint8Array(hex.match(/.{1,2}/g).map((b) => parseInt(b, 16)));
const bytesToHex = (buf) =>
  [...new Uint8Array(buf)]
    .map((b) => b.toString(16).padStart(2, "0"))
    .join("");
const sha256Hex = async (text) => {
  const enc = new TextEncoder().encode(String(text));
  const buf = await crypto.subtle.digest("SHA-256", enc);
  return bytesToHex(buf);
};

async function deriveKeyBytes(input) {
  // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô hex 64 ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏ó‡∏≥ SHA-256
  const hex = isHex64(input) ? input : await sha256Hex(input);
  return hexToBytes(hex); // 32 bytes
}

function UploadFile() {
  const [file, setFile] = useState(null);
  const [filename, setFilename] = useState("");
  const [folder, setFolder] = useState("");
  const [encryptionKey, setEncryptionKey] = useState("");
  const [warning, setWarning] = useState("");

  const handleFileChange = (e) => setFile(e.target.files[0]);

  const generateKey = () => {
    const key = [...crypto.getRandomValues(new Uint8Array(32))]
      .map((b) => b.toString(16).padStart(2, "0"))
      .join("");
    setEncryptionKey(key);
    setWarning("‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏µ‡∏¢‡πå‡πÅ‡∏ö‡∏ö 64 hex ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß");
  };

  const handleKeyChange = (val) => {
    setEncryptionKey(val);
    if (val && !isHex64(val)) {
      setWarning(
        "‚ÑπÔ∏è ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ó‡∏≥ SHA-256 ‡πÉ‡∏´‡πâ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‚Üí ‡∏Ñ‡∏µ‡∏¢‡πå 64 hex"
      );
    } else if (val.length === 64 && isHex64(val)) {
      setWarning("‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏µ‡∏¢‡πå hex 64 ‡∏ï‡∏±‡∏ß‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏´‡∏ô‡∏î");
    } else {
      setWarning("");
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    if (!file || !filename) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå");
      return;
    }
    if (!encryptionKey.trim()) {
      alert("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏î Generate)");
      return;
    }

    try {
      // 1) ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ü‡∏•‡πå‡πÄ‡∏õ‡πá‡∏ô ArrayBuffer
      const plainBuf = await file.arrayBuffer();

      // 2) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡∏µ‡∏¢‡πå‡πÅ‡∏•‡∏∞ iv (16 bytes ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö AES-GCM)
      const keyBytes = await deriveKeyBytes(encryptionKey.trim());
      const cryptoKey = await crypto.subtle.importKey(
        "raw",
        keyBytes,
        "AES-GCM",
        false,
        ["encrypt"]
      );
      const iv = crypto.getRandomValues(new Uint8Array(16)); // 16 bytes ‚Üí 32 hex

      // 3) ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ö‡∏ô client
      const cipherBuf = await crypto.subtle.encrypt(
        { name: "AES-GCM", iv },
        cryptoKey,
        plainBuf
      );

      // 4) ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î "ciphertext" + metadata
      const formData = new FormData();
      formData.append(
        "cipher",
        new Blob([cipherBuf]),
        `${Date.now()}_${file.name}.enc`
      );
      formData.append("originalName", file.name);
      formData.append("filename", filename);
      formData.append("folder", folder);
      formData.append("iv", bytesToHex(iv));
      formData.append("mime", file.type || "application/octet-stream");

      const res = await fetch("http://localhost:3000/api/upload", {
        method: "POST",
        body: formData,
      });
      const json = await res.json();
      if (!res.ok) throw new Error(json?.error || "Upload failed");

      alert("‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™‡πÅ‡∏•‡πâ‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à (‡∏ù‡∏±‡πà‡∏á‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏Ñ‡∏µ‡∏¢‡πå)");
      setFile(null);
      setFilename("");
      setFolder("");
      setEncryptionKey("");
      setWarning("");
    } catch (err) {
      console.error("‚ùå Upload failed:", err);
      alert(err.message);
    }
  };

  return (
    <div className="container">
      <h2>üîí Upload File (Client-side Encryption: AES-GCM)</h2>
      <form onSubmit={handleSubmit}>
        <input type="file" onChange={handleFileChange} />
        <input
          placeholder="‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå"
          value={filename}
          onChange={(e) => setFilename(e.target.value)}
        />
        <input
          placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)"
          value={folder}
          onChange={(e) => setFolder(e.target.value)}
        />
        <input
          placeholder="‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏´‡∏±‡∏™ (‡∏û‡∏¥‡∏°‡∏û‡πå‡∏≠‡∏∞‡πÑ‡∏£‡∏Å‡πá‡πÑ‡∏î‡πâ ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏™‡πà 64 ‡∏ï‡∏±‡∏ß hex)"
          value={encryptionKey}
          onChange={(e) => handleKeyChange(e.target.value)}
        />
        {warning && <p style={{ color: "blue", fontSize: "14px" }}>{warning}</p>}
        <button type="button" onClick={generateKey}>
          Generate Key (hex64)
        </button>
        <button type="submit">Upload</button>
      </form>
    </div>
  );
}

export default UploadFile;
